<?xml version="1.0" encoding="utf-8"?>
<mx:TabNavigator xmlns:fx="http://ns.adobe.com/mxml/2009" 
				 xmlns:s="library://ns.adobe.com/flex/spark" 
				 xmlns:mx="library://ns.adobe.com/flex/mx" xmlns:components="br.mil.pamerj.projects.telefonia.components.*"
				 creationComplete="initialSetup()">
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	<fx:Script>
		<![CDATA[
			import br.mil.pamerj.projects.telefonia.events.FaturamentoServiceEvent;
			import br.mil.pamerj.projects.telefonia.model.Faturamento;
			import br.mil.pamerj.projects.telefonia.services.FaturamentoService;
			import br.mil.pamerj.projects.telefonia.utils.Utils;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.events.CloseEvent;
			import mx.validators.Validator;
			
			
			[Bindable]
			private var faturamentoService:FaturamentoService = new FaturamentoService();
			[Bindable]
			private var faturamentos:ArrayCollection;
			[Bindable]
			private var faturamento:Faturamento = new Faturamento();
			
			
			
			private function initialSetup():void {
			
				
				faturamentoService.addEventListener(
					FaturamentoServiceEvent.FATURAMENTO_CREATED_EVENT, handleFaturamentoCreated);
				faturamentoService.addEventListener(
					FaturamentoServiceEvent.FATURAMENTO_LOADED_EVENT, handleFaturamentoLoaded);
				faturamentoService.addEventListener(
					FaturamentoServiceEvent.FATURAMENTO_REMOVED_EVENT, handleFaturamentoRemoved);
				faturamentoService.addEventListener(
					FaturamentoServiceEvent.FATURAMENTO_UPDATED_EVENT, handleFaturamentoUpdated);
				faturamentoService.addEventListener(
					FaturamentoServiceEvent.FATURAMENTOS_LOADED_EVENT, handleFaturamentosLoaded);
				
				changeButtonsState();
				loadData();
			}
			
			private function loadData():void{
				faturamentoService.findAll();
			}
			/*
			**
			** Buttons Handlers
			**
			*/
			
			private function handleGravarClick():void{
				var erros:Array = Validator.validateAll(faturamentoForm.validators);
				if (erros.length > 0){
					Alert.show("Por favor, preencha os dados corretamente");
				}else{
					faturamentoService.create(faturamentoForm.faturamento, faturamentoForm.file.data);
				}
			}
			
			private function handleAtualizarClick():void{
				var erros:Array = Validator.validateAll(faturamentoForm.validators);
				if (erros.length > 0){
					Alert.show("Por favor, preencha os dados corretamente");
				}else{
					faturamentoService.update(faturamentoForm.faturamento);
				}
			}
			
			private function handleRemoverClick():void{
				if(dataList.selectedIndex < 0){
					Alert.show("Por favor, selecione um item para remover");
				}else{
					Alert.show('Tem certeza de que deseja excluir este item?', 
						'Confirmação', 
						Alert.OK | Alert.CANCEL,
						this, confirmRemoverListener, null, Alert.OK);
				} 
			}
			
			private function handleEditarClick():void{
				if(dataList.selectedIndex < 0){
					Alert.show("Por favor, selecione um item para editar");
				}else{
					faturamentoService.find(dataList.selectedItem.id);
				}
				
			}
			
			private function handleNovoClick():void{
				faturamento = new Faturamento();
				
				mainStack.selectedIndex=1;
			}
			
			/*
			**
			** SERVICE EVENTS HANDLERS
			**
			*/
			
			private function handleFaturamentoCreated(event:Event):void{
				faturamentoForm.faturamento = new Faturamento();
				mainStack.selectedIndex=0;
				loadData();
				Alert.show("Faturamento cadastrado com sucesso!");
			}
			
			private function handleFaturamentoLoaded(event:FaturamentoServiceEvent):void{
				faturamento = event.faturamento
				mainStack.selectedIndex = 1;
				
			}
			
			private function handleFaturamentosLoaded(event:FaturamentoServiceEvent):void{
				this.faturamentos = event.faturamentos;
				
			}
			
			private function handleFaturamentoRemoved(event:Event):void{
				faturamentos.removeItemAt(dataList.selectedIndex);
				
			}	
			
			private function handleFaturamentoUpdated(event:Event):void {
				
				faturamentos[dataList.selectedIndex] = faturamentoForm.faturamento;
				faturamentoForm.faturamento = new Faturamento();
				mainStack.selectedIndex=0;
				Alert.show("Faturamento atualizado com sucesso!");
				
			}
			
			/*
			**
			** Outros Métodos
			**
			*/
			
			private function confirmRemoverListener(event:CloseEvent):void{
				if (event.detail == Alert.OK)
					faturamentoService.remove(dataList.selectedItem.id);
			}
			private function changeButtonsState():void{
				if (mainStack.selectedIndex == 0){
					Utils.showComponent(novo);
					Utils.showComponent(editar);
					Utils.showComponent(remover);
					Utils.hideComponent(cancelar)
					Utils.hideComponent(gravar);
					Utils.hideComponent(atualizar)
				}else if(mainStack.selectedIndex == 1){
					Utils.hideComponent(novo);
					Utils.hideComponent(editar);
					Utils.hideComponent(remover);
					Utils.showComponent(cancelar)
					if(faturamentoForm.faturamento.id > 0){
						Utils.showComponent(atualizar);
						Utils.hideComponent(gravar);
					}else{
						Utils.showComponent(gravar);
						Utils.hideComponent(editar);
					}
				}
			}
		]]>
	</fx:Script>
	<s:NavigatorContent label="Faturamentos">
		<s:VGroup  left="20" right="20" top="10" bottom="10">
			<mx:ViewStack id="mainStack" width="100%" height="100%" change="changeButtonsState()">
				<s:NavigatorContent label="Listar" width="100%" height="100%">
					<s:layout>
						<s:VerticalLayout/>
					</s:layout>
					<s:VGroup width="100%" height="100%">
						<components:FaturamentoDG width="100%" height="100%" 
											id="dataList" dataProvider="{faturamentos}"/>
					</s:VGroup>
				</s:NavigatorContent>
				<s:NavigatorContent label="Editar" width="100%" height="100%">
					<s:layout>
						<s:VerticalLayout/>
					</s:layout>
					<components:FaturamentoForm 
										  faturamento="{faturamento}"
										  id="faturamentoForm"/>
					
				</s:NavigatorContent>
			</mx:ViewStack>
			<s:HGroup width="100%" horizontalAlign="right" verticalAlign="middle">
				<components:DefaultButton id="novo" label="Novo" click="handleNovoClick()"/>
				<components:DefaultButton id="remover" label="Remover" click="handleRemoverClick()"/>
				<components:DefaultButton id="editar" label="Editar" click="handleEditarClick()" />
				<components:DefaultButton id="cancelar" label="Cancelar" click="mainStack.selectedIndex=0"/>
				<components:DefaultButton id="gravar" label="Gravar" click="handleGravarClick()"/>
				<components:DefaultButton id="atualizar" label="Atualizar" click="handleAtualizarClick()"/>
			</s:HGroup>
			
		</s:VGroup>		
		
	</s:NavigatorContent>
</mx:TabNavigator>

<?xml version="1.0" encoding="utf-8"?>
<mx:TabNavigator xmlns:fx="http://ns.adobe.com/mxml/2009" 
				 xmlns:s="library://ns.adobe.com/flex/spark" 
				 xmlns:mx="library://ns.adobe.com/flex/mx" xmlns:components="br.mil.pamerj.projects.telefonia.components.*"
				 creationComplete="initialSetup()"
				 change="loadData()">
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
		<mx:DateFormatter id="formatterMes" formatString="MM/ YYYY" />
	</fx:Declarations>
	<fx:Script>
		<![CDATA[
			import br.mil.pamerj.projects.telefonia.events.FaturamentoServiceEvent;
			import br.mil.pamerj.projects.telefonia.events.LigacaoServiceEvent;
			import br.mil.pamerj.projects.telefonia.model.AdminUser;
			import br.mil.pamerj.projects.telefonia.model.Faturamento;
			import br.mil.pamerj.projects.telefonia.model.Ligacao;
			import br.mil.pamerj.projects.telefonia.services.FaturamentoService;
			import br.mil.pamerj.projects.telefonia.services.LigacaoService;
			import br.mil.pamerj.projects.telefonia.services.UserService;
			import br.mil.pamerj.projects.telefonia.utils.Utils;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.core.FlexGlobals;
			import mx.events.CloseEvent;
			import mx.validators.Validator;
			
			import spark.components.gridClasses.GridColumn;
			import spark.events.IndexChangeEvent;
			
			
			[Bindable]
			private var ligacaoService:LigacaoService = new LigacaoService();
			[Bindable]
			private var faturamentoService:FaturamentoService = new FaturamentoService();
			
			[Bindable]
			private var faturamentos:ArrayCollection;
			[Bindable]
			private var ligacoes:ArrayCollection;

			[Bindable]
			private var ligacao:Ligacao = new Ligacao();
			
			
			private function initialSetup():void {
				

				ligacaoService.addEventListener(
					LigacaoServiceEvent.LIGACAO_LOADED_EVENT, handleUserLoaded);

				ligacaoService.addEventListener(
					LigacaoServiceEvent.LIGACOES_LOADED_EVENT, handleUsersLoaded);
				
				faturamentoService.addEventListener(FaturamentoServiceEvent.FATURAMENTOS_LOADED_EVENT, handleFaturamentosLoaded);
				
				loadData();
			}
			
			private function loadData():void{
				faturamentoService.findAll();
				
			}
			
			/*
			**
			** Buttons Handlers
			**
			*/
			
	
			private function handleRemoverClick():void{
				if(dataList.selectedIndex < 0){
					Alert.show("Por favor, selecione um item para remover");
				}else{
					Alert.show('Tem certeza de que deseja excluir este item?', 
						'Confirmação', 
						Alert.OK | Alert.CANCEL,
						this, confirmRemoverListener, null, Alert.OK);
				} 
			}
			
			private function handleEditarClick():void{
				if(dataList.selectedIndex < 0){
					Alert.show("Por favor, selecione um item para editar");
				}else{
					ligacaoService.find(dataList.selectedItem.id);
				}
				
			}
			
			private function handleNovoClick():void{
				ligacao = new Ligacao();
				mainStack.selectedIndex=1;
			}
			
			/*
			**
			** SERVICE EVENTS HANDLERS
			**
			*/
			

			private function handleUserLoaded(event:LigacaoServiceEvent):void{
				ligacao = event.ligacao
				mainStack.selectedIndex = 1;
				
			}
			
			private function handleUsersLoaded(event:LigacaoServiceEvent):void{
				this.ligacoes = event.ligacoes;
				if(ligacoes.length < 1){
					Alert.show("Não há ligações registradas para este usuário." +
						" Porém isto não significa que não haja faturas pendentes." +
						" Certifique-se junto a CENTEL se o seu usuário está cadastrado no sistema.");
				}
				
			}
			private function handleFaturamentosLoaded(event:FaturamentoServiceEvent):void{
				this.faturamentos = event.faturamentos;
				periodoCB.selectedIndex = 0;
				//ligacaoService.findAll();
				ligacaoService.findAllByLogin(FlexGlobals.topLevelApplication.login, (faturamentos.getItemAt(0) as Faturamento).periodo);
				
			}			
			
			/*
			**
			** Outros Métodos
			**
			*/
			
			private function confirmRemoverListener(event:CloseEvent):void{
				if (event.detail == Alert.OK)
					ligacaoService.remove(dataList.selectedItem.id);
			}
			
			
			protected function periodoCBchangeHandler(event:IndexChangeEvent):void
			{
				ligacaoService.findAllByLogin(FlexGlobals.topLevelApplication.login, (periodoCB.selectedItem as Faturamento).periodo);
				
			}
			private function labelPeriodo(item:Object):String{
				return formatterMes.format((item as Faturamento).periodo as Date).toUpperCase();	
			}
			
		]]>
	</fx:Script>
	<s:NavigatorContent label="Ligações">
		<s:VGroup  left="20" right="20" top="10" bottom="10">
			<mx:ViewStack id="mainStack" width="100%" height="100%">
				<s:NavigatorContent label="Listar" width="100%" height="100%">
					<s:layout>
						<s:VerticalLayout/>
					</s:layout>
					<s:VGroup width="100%" height="100%">
						<s:Label fontWeight="bold" fontSize="16" text="Pesquisar Ligações"/>
						<s:HGroup verticalAlign="middle">
							<s:Label text="Período: "/>
							<s:ComboBox id="periodoCB" dataProvider="{faturamentos}" 
										change="periodoCBchangeHandler(event)"
										labelFunction="labelPeriodo"/>
							
						</s:HGroup>
						
						<components:LigacaoDG width="100%" height="100%" 
											id="dataList" dataProvider="{ligacoes}"/>
					</s:VGroup>
				</s:NavigatorContent>

			</mx:ViewStack>
			<s:HGroup width="100%" horizontalAlign="right" verticalAlign="middle">
				<!--
				<components:DefaultButton id="fechar" label="Fechar Fatura" click="handleNovoClick()"/>
				-->
			</s:HGroup>
			
		</s:VGroup>		
		
	</s:NavigatorContent>
</mx:TabNavigator>
